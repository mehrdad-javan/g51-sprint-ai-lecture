package se.lexicon.sprintailecture.service;

import org.springframework.ai.openai.OpenAiChatModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;

@Service
public class OpenAIServiceImpl implements  OpenAIService {

    OpenAiChatModel openAiChatModel;

    @Autowired
    public OpenAIServiceImpl(OpenAiChatModel openAiChatModel) {
        this.openAiChatModel = openAiChatModel;
    }

    @Override
    public String chat(String question) {
        // add system instruction
        // calling functions
        // process and customise the response
        // ...

        // call method returns the response that generated by openai models
        return openAiChatModel.call(question);
    }

    @Override
    public Flux<String> reactiveChat(String question) {
        /*Reactive programing is a way of writing code that focuses on handling data
         and events as they happen without waiting or blocking.
         Mono: handles one pipe of data.
         Flux: handles a flow of data.

        A stream is a sequence of data that arrives over time
        It lets up process this data as soon as it comes, without blocking other tasks
        */
        return openAiChatModel.stream(question);
    }


}
